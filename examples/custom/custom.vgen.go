// THIS FILE IS GENERATED BY VGEN
// DO NOT EDIT
package main
import (
	"fmt"
)
type PersonVgen struct {
	Name *string `json:"name"`
	Age *int `json:"age"`
	Vibes *bool `json:"vibes"`
}
func (t PersonVgen) ValidatedConvert() (Person, *map[string][]string) {
	errs := t.Validate()
	if len(errs) > 0 {
		return Person{}, &errs
	}
	return t.Convert(), nil
}
func (t PersonVgen) Validate() map[string][]string {
	errs := make(map[string][]string)
	if t.Name != nil {
		_Name := *t.Name
		{
			if !(len(_Name) > 0) {
				errs[fmt.Sprintf("name")] = append(errs[fmt.Sprintf("name")], fmt.Sprintf("can not be empty"))
			}
			if err := isBob(_Name); err != nil {
				errs[fmt.Sprintf("name")] = append(errs[fmt.Sprintf("name")], err.Error())
			}
		}
	} else {
		errs["name"] = append(errs["name"], fmt.Sprintf("required"))
	}
	if t.Age != nil {
		_Age := *t.Age
		{
			if !(_Age > 18) {
				errs[fmt.Sprintf("age")] = append(errs[fmt.Sprintf("age")], fmt.Sprintf("must be > 18"))
			}
			if !(_Age < 22) {
				errs[fmt.Sprintf("age")] = append(errs[fmt.Sprintf("age")], fmt.Sprintf("must be < 22"))
			}
		}
	} else {
		errs["age"] = append(errs["age"], fmt.Sprintf("required"))
	}
	if t.Vibes != nil {
		_Vibes := *t.Vibes
		{
			_ = _Vibes
		}
	} else {
		errs["vibes"] = append(errs["vibes"], fmt.Sprintf("required"))
	}
	return errs
}
func (t PersonVgen) Convert() Person {
	var res Person
	if t.Name != nil {
		_Name := *t.Name
		res.Name = _Name
	}
	if t.Age != nil {
		_Age := *t.Age
		res.Age = _Age
	}
	if t.Vibes != nil {
		_Vibes := *t.Vibes
		res.Vibes = _Vibes
	}
	return res
}
