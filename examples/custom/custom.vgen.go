// THIS FILE IS GENERATED BY VGEN
// DO NOT EDIT
package main
import (
	"encoding/json"
	"fmt"
)
type PersonVgen struct {
	Name  *string
	Age   *int
	Vibes *bool
}
func (t PersonVgen) Validate() (Person, error) {
	person, errs := t.InnerValidation()
	if len(errs) > 0 {
		j, _ := json.Marshal(errs)
		return Person{}, fmt.Errorf("%s", j)
	}
	return person, nil
}
func (t PersonVgen) InnerValidation() (Person, map[string][]string) {
	res := Person{}
	errs := make(map[string][]string)
	if t.Name != nil {
		name := *t.Name
		{
			if !(len(name) > 0) {
				errs[fmt.Sprintf("name")] = append(errs[fmt.Sprintf("name")], fmt.Sprintf("can not be empty"))
			}
			if err := isBob(name); err != nil {
				errs[fmt.Sprintf("name")] = append(errs[fmt.Sprintf("name")], err.Error())
			}
			_ = name
		}
	} else {
		errs["name"] = append(errs["name"], fmt.Sprintf("required"))
	}
	if t.Age != nil {
		age := *t.Age
		{
			if !(age > 18) {
				errs[fmt.Sprintf("age")] = append(errs[fmt.Sprintf("age")], fmt.Sprintf("must be > 18"))
			}
			if !(age < 22) {
				errs[fmt.Sprintf("age")] = append(errs[fmt.Sprintf("age")], fmt.Sprintf("must be < 22"))
			}
			_ = age
		}
	} else {
		errs["age"] = append(errs["age"], fmt.Sprintf("required"))
	}
	if t.Vibes != nil {
		vibes := *t.Vibes
		{
			_ = vibes
		}
	} else {
		errs["vibes"] = append(errs["vibes"], fmt.Sprintf("required"))
	}
	if len(errs) > 0 {
		return Person{}, errs
	}
	return res, nil
}
