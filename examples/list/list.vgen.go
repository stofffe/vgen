//
// THIS FILE IS GENERATED BY VGEN
// DO NOT EDIT
//
package main
import (
	"fmt"
)
type PersonVgen struct {
	Nicknames *[]string `json:"nicknames"`
	A *[][]string `json:"a"`
}
func (t PersonVgen) Validate() map[string][]string {
	errs := make(map[string][]string)
	if t.Nicknames != nil {
		_Nicknames := *t.Nicknames
		{
			for i0, _Nicknames := range _Nicknames {
				path := fmt.Sprintf("nicknames[%d]", i0)
				if !(len(_Nicknames) > 3) {
					errs[path] = append(errs[path], fmt.Sprintf("len must be > 3"))
				}
			}
		}
	}
	if t.A != nil {
		_A := *t.A
		{
			for i0, _A := range _A {
				for i1, _A := range _A {
					path := fmt.Sprintf("a[%d][%d]", i0, i1)
					if err := isBob(_A); err != nil {
						errs[path] = append(errs[path], err.Error())
					}
					if !(len(_A) > 0) {
						errs[path] = append(errs[path], fmt.Sprintf("can not be empty"))
					}
				}
			}
		}
	}
	return errs
}
func (t PersonVgen) Convert() Person {
	var res Person
	if t.Nicknames != nil {
		_Nicknames := *t.Nicknames
		res.Nicknames = _Nicknames
	}
	if t.A != nil {
		_A := *t.A
		res.A = _A
	}
	return res
}
func (t PersonVgen) ValidatedConvert() (Person, *map[string][]string) {
	errs := t.Validate()
	if len(errs) > 0 {
		return Person{}, &errs
	}
	return t.Convert(), nil
}
