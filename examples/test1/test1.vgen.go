// THIS FILE IS GENERATED BY VGEN
// DO NOT EDIT

package main

import (
	"encoding/json"

	"fmt"
)

type PersonVgen struct {
	Name  *string
	Age   *int
	Vibes *bool
}

func (t PersonVgen) Validate() (Person, error) {
	// TODO add output formatting here
	person, errs := t.innerValidation()
	if len(errs) > 0 {
		j, _ := json.Marshal(errs)
		return Person{}, fmt.Errorf("%s", j)
	}
	return person, nil
}

func (t PersonVgen) innerValidation() (Person, map[string][]string) {
	res := Person{}
	errs := make(map[string][]string)

	if t.Name != nil {

		name := *t.Name

		if !(len(name) > 0) {
			errs["name"] = append(errs["name"], fmt.Sprintf(`can not be empty`))
		}

		res.Name = name
	} else {
		errs["name"] = append(errs["name"], fmt.Sprintf("required"))
	}

	if t.Age != nil {

		age := *t.Age

		res.Age = age
	} else {
		errs["age"] = append(errs["age"], fmt.Sprintf("required"))
	}

	if t.Vibes != nil {

		vibes := *t.Vibes

		res.Vibes = vibes
	} else {
		errs["vibes"] = append(errs["vibes"], fmt.Sprintf("required"))
	}

	if len(errs) > 0 {
		return Person{}, errs
	}

	return res, nil
}
