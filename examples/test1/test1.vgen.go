// THIS FILE IS GENERATED BY VGEN
// DO NOT EDIT

package main

import (
	"encoding/json"

	"fmt"
)

type PersonVgen struct {
	Name  *string
	Age   *int
	Vibes *bool
}

func (t PersonVgen) Validate() (Person, error) {
	person, errs := t.InnerValidation()
	if len(errs) > 0 {
		j, _ := json.Marshal(errs)
		return Person{}, fmt.Errorf("%s", j)
	}
	return person, nil
}

func (t PersonVgen) InnerValidation() (Person, map[string][]string) {
	res := Person{}
	errs := make(map[string][]string)

	if t.Name != nil {
		name := *t.Name // TODO not working for 0 rules

		// RULES

		// Name not_empty
		if !(len(name) > 0) {
			errs["name"] = append(errs["name"], fmt.Sprintf("can not be empty"))
		}

		_ = name // No rules fix

	}

	if t.Age != nil {
		age := *t.Age // TODO not working for 0 rules

		// RULES

		// Age gt 18
		if !(age > 18) {
			errs["age"] = append(errs["age"], fmt.Sprintf("must be > 18"))
		}

		// Age lt 22
		if !(age < 22) {
			errs["age"] = append(errs["age"], fmt.Sprintf("must be < 22"))
		}

		_ = age // No rules fix

	}

	if t.Vibes != nil {
		vibes := *t.Vibes // TODO not working for 0 rules

		// RULES

		_ = vibes // No rules fix

	}

	if len(errs) > 0 {
		return Person{}, errs
	}

	return res, nil
}
