// THIS FILE IS GENERATED BY VGEN
// DO NOT EDIT
package main
import (
	"encoding/json"
	"fmt"
)
type PersonVgen struct {
	Name *string `json:"name"`
	Nickname *string `json:"nickname"`
	Age *int `json:"age"`
}
func (t PersonVgen) Validate() (Person, error) {
	_Person, errs := t.InnerValidation()
	if len(errs) > 0 {
		j, _ := json.Marshal(errs)
		return Person{}, fmt.Errorf("%s", j)
	}
	return _Person, nil
}
func (t PersonVgen) InnerValidation() (Person, map[string][]string) {
	res := Person{}
	errs := make(map[string][]string)
	if t.Name != nil {
		_Name := *t.Name
		{
			if !(len(_Name) > 0) {
				errs[fmt.Sprintf("name")] = append(errs[fmt.Sprintf("name")], fmt.Sprintf("can not be empty"))
			}
			if !(len(_Name) < 10) {
				errs[fmt.Sprintf("name")] = append(errs[fmt.Sprintf("name")], fmt.Sprintf("len must be < 10"))
			}
			_ = _Name
		}
	} else {
		errs["name"] = append(errs["name"], fmt.Sprintf("required"))
	}
	if t.Nickname != nil {
		_Nickname := *t.Nickname
		{
			_ = _Nickname
		}
	} else {
		errs["nickname"] = append(errs["nickname"], fmt.Sprintf("required"))
	}
	if t.Age != nil {
		_Age := *t.Age
		{
			if !(_Age > 10) {
				errs[fmt.Sprintf("age")] = append(errs[fmt.Sprintf("age")], fmt.Sprintf("must be > 10"))
			}
			_ = _Age
		}
	} else {
		errs["age"] = append(errs["age"], fmt.Sprintf("required"))
	}
	if len(errs) > 0 {
		return Person{}, errs
	}
	return res, nil
}
