//
// THIS FILE IS GENERATED BY VGEN
// DO NOT EDIT
//
package main
import (
	"fmt"
)
type PersonVgen struct {
	Name *string `json:"name"`
	Nickname *string `json:"nickname"`
	Age *int `json:"age"`
}
func (t PersonVgen) Validate() map[string][]string {
	errs := make(map[string][]string)
	if t.Name != nil {
		_Name := *t.Name
		{
			path := fmt.Sprintf("name")
			if !(len(_Name) > 0) {
				errs[path] = append(errs[path], fmt.Sprintf("can not be empty"))
			}
			if !(len(_Name) < 10) {
				errs[path] = append(errs[path], fmt.Sprintf("len must be < 10"))
			}
		}
	} else {
		errs["name"] = append(errs["name"], fmt.Sprintf("required"))
	}
	if t.Nickname != nil {
	} else {
		errs["nickname"] = append(errs["nickname"], fmt.Sprintf("required"))
	}
	if t.Age != nil {
		_Age := *t.Age
		{
			path := fmt.Sprintf("age")
			if !(_Age > 10) {
				errs[path] = append(errs[path], fmt.Sprintf("must be > 10"))
			}
		}
	} else {
		errs["age"] = append(errs["age"], fmt.Sprintf("required"))
	}
	return errs
}
func (t PersonVgen) Convert() Person {
	var res Person
	if t.Name != nil {
		_Name := *t.Name
		res.Name = _Name
	}
	if t.Nickname != nil {
		_Nickname := *t.Nickname
		res.Nickname = _Nickname
	}
	if t.Age != nil {
		_Age := *t.Age
		res.Age = _Age
	}
	return res
}
func (t PersonVgen) ValidatedConvert() (Person, *map[string][]string) {
	errs := t.Validate()
	if len(errs) > 0 {
		return Person{}, &errs
	}
	return t.Convert(), nil
}
