// THIS FILE IS GENERATED BY VGEN
// DO NOT EDIT
package main
import (
	"encoding/json"
	"fmt"
)
type AddressVgen struct {
	Street *string `json:"street"`
	Number *int `json:"number"`
}
func (t AddressVgen) Validate() (Address, error) {
	_Address, errs := t.InnerValidation()
	if len(errs) > 0 {
		j, _ := json.Marshal(errs)
		return Address{}, fmt.Errorf("%s", j)
	}
	return _Address, nil
}
func (t AddressVgen) InnerValidation() (Address, map[string][]string) {
	res := Address{}
	errs := make(map[string][]string)
	if t.Street != nil {
		_Street := *t.Street
		{
			if !(len(_Street) > 0) {
				errs[fmt.Sprintf("street")] = append(errs[fmt.Sprintf("street")], fmt.Sprintf("can not be empty"))
			}
			_ = _Street
		}
	} else {
		errs["street"] = append(errs["street"], fmt.Sprintf("required"))
	}
	if t.Number != nil {
		_Number := *t.Number
		{
			if !(_Number < 5) {
				errs[fmt.Sprintf("number")] = append(errs[fmt.Sprintf("number")], fmt.Sprintf("must be < 5"))
			}
			_ = _Number
		}
	} else {
		errs["number"] = append(errs["number"], fmt.Sprintf("required"))
	}
	if len(errs) > 0 {
		return Address{}, errs
	}
	return res, nil
}
type PersonVgen struct {
	Name *string `json:"name"`
	Address1 *Address `json:"address1"`
	Address2 *AddressVgen `json:"address2"`
	Addresses *[]AddressVgen `json:"addresses"`
	Addresses2 *[][]AddressVgen `json:"addresses2"`
}
func (t PersonVgen) Validate() (Person, error) {
	_Person, errs := t.InnerValidation()
	if len(errs) > 0 {
		j, _ := json.Marshal(errs)
		return Person{}, fmt.Errorf("%s", j)
	}
	return _Person, nil
}
func (t PersonVgen) InnerValidation() (Person, map[string][]string) {
	res := Person{}
	errs := make(map[string][]string)
	if t.Name != nil {
		_Name := *t.Name
		{
			if !(len(_Name) > 0) {
				errs[fmt.Sprintf("name")] = append(errs[fmt.Sprintf("name")], fmt.Sprintf("can not be empty"))
			}
			if !(len(_Name) < 20) {
				errs[fmt.Sprintf("name")] = append(errs[fmt.Sprintf("name")], fmt.Sprintf("len must be < 20"))
			}
			_ = _Name
		}
	} else {
		errs["name"] = append(errs["name"], fmt.Sprintf("required"))
	}
	if t.Address1 != nil {
		_Address1 := *t.Address1
		{
			if err := valAddr(_Address1); err != nil {
				errs[fmt.Sprintf("address1")] = append(errs[fmt.Sprintf("address1")], err.Error())
			}
			_ = _Address1
		}
	}
	if t.Address2 != nil {
		_Address2 := *t.Address2
		{
			_Address2, struct_errs := _Address2.InnerValidation()
			for path, err_list := range struct_errs {
				for _, err := range err_list {
					errs[fmt.Sprintf("address2")+"."+path] = append(errs[fmt.Sprintf("address2")+"."+path], err)
				}
			}
			_ = _Address2
			if err := valAddr(_Address2); err != nil {
				errs[fmt.Sprintf("address2")] = append(errs[fmt.Sprintf("address2")], err.Error())
			}
		}
	} else {
		errs["address2"] = append(errs["address2"], fmt.Sprintf("required"))
	}
	if t.Addresses != nil {
		_Addresses := *t.Addresses
		{
			for i0, _Addresses := range _Addresses {
				_Addresses, struct_errs := _Addresses.InnerValidation()
				for path, err_list := range struct_errs {
					for _, err := range err_list {
						errs[fmt.Sprintf("addresses[%d]", i0)+"."+path] = append(errs[fmt.Sprintf("addresses[%d]", i0)+"."+path], err)
					}
				}
				_ = _Addresses
				_ = i0
			}
		}
	} else {
		errs["addresses"] = append(errs["addresses"], fmt.Sprintf("required"))
	}
	if t.Addresses2 != nil {
		_Addresses2 := *t.Addresses2
		{
			for i0, _Addresses2 := range _Addresses2 {
				for i1, _Addresses2 := range _Addresses2 {
					_Addresses2, struct_errs := _Addresses2.InnerValidation()
					for path, err_list := range struct_errs {
						for _, err := range err_list {
							errs[fmt.Sprintf("addresses2[%d][%d]", i0, i1)+"."+path] = append(errs[fmt.Sprintf("addresses2[%d][%d]", i0, i1)+"."+path], err)
						}
					}
					_ = _Addresses2
					_ = i1
				}
				_ = i0
			}
		}
	} else {
		errs["addresses2"] = append(errs["addresses2"], fmt.Sprintf("required"))
	}
	if len(errs) > 0 {
		return Person{}, errs
	}
	return res, nil
}
