{{ define "package" }}
// THIS FILE IS GENERATED BY VGEN
// DO NOT EDIT

package {{ . }}

import (
    "fmt"
    "encoding/json"
    "strconv"
)
{{ end }}

{{ define "struct_type" }}
type {{ .Name }}Vgen struct {
    {{- range .Fields }}
        {{ .Name }} *{{ .Typ -}}
    {{ end }}
}
{{ end }}

{{ define "struct_validation" }}
func (t {{ .Name }}Vgen) Validate() ({{ .Name }}, error) {
    res := {{ .Name }}{}
    errs := make(map[string][]string)

    {{ range .Fields }}
        if t.{{ .Name }} != nil {
            {{ lowerFirstFunc .Name }} := *t.{{ .Name }}

            {{ .FieldValidationCode }}

            res.{{ .Name }} = {{ lowerFirstFunc .Name }}
        }  {{ if .Required }} else {
                errs["{{ lowerFirstFunc .Name }}"] = append(errs["{{ lowerFirstFunc .Name }}"], fmt.Sprintf("required"))
        } {{- end }}
    {{ end }}

	if len(errs) > 0 {
		j, _ := json.Marshal(errs)
		return {{ .Name }}{}, fmt.Errorf("%s", j)
	}

    return res, nil
}
{{ end }}

{{ define "primitive_field_validation"}}
   {{ range .Rules }} 
        {{ .RuleValidationCode }}
   {{ end }}
{{ end }}

{{ define "list_field_validation"}}
    {{ range .ListRules }} 
        {{ .RuleValidationCode }}
    {{ end }}

    for i, {{ lowerFirstFunc .Name }} := range {{ lowerFirstFunc .Name }} {
        {{ range .ValueRules }} 
            {{ .RuleValidationCode }}
        {{ end }}
    }
{{ end }}
