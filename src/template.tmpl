{{ define "package" }}
// THIS FILE IS GENERATED BY VGEN
// DO NOT EDIT

package {{ .Package }}

import (
    {{ range .Imports }}
        "{{ . }}"
    {{ end }}
)

{{ end }}

{{ define "struct_type" }}
type {{ .Name }}Vgen struct {
    {{- range .Fields }}
        {{ .Name }} *{{ .Typ -}}
    {{ end }}
}
{{ end }}

{{ define "struct_validation" }}
func (t {{ .Name }}Vgen) Validate() ({{ .Name }}, error) {
    // TODO add output formatting here
    {{ lowerFirstFunc .Name }}, errs :=  t.innerValidation()
    if len(errs) > 0 {
        j, _ := json.Marshal(errs)
        return {{ .Name }}{}, fmt.Errorf("%s", j)
    }
    return {{ lowerFirstFunc .Name }}, nil
}

func (t {{ .Name }}Vgen) innerValidation() ({{ .Name }}, map[string][]string) {
    res := {{ .Name }}{}
    errs := make(map[string][]string)

    {{ range .Fields }}
        if t.{{ .Name }} != nil {

            {{ .FieldValidationCode }}

            res.{{ .Name }} = {{ lowerFirstFunc .Name }}
        }  {{ if .Required }} else {
                errs["{{ lowerFirstFunc .Name }}"] = append(errs["{{ lowerFirstFunc .Name }}"], fmt.Sprintf("required"))
        } {{- end }}
    {{ end }}

	if len(errs) > 0 {
		return {{ .Name }}{}, errs
	}

    return res, nil
}
{{ end }}

{{ define "primitive_field_validation"}}
    {{ lowerFirstFunc .Name }} := *t.{{ .Name }}
   {{ range .Rules }} 
        {{ .RuleValidationCode }}
   {{ end }}
{{ end }}

{{ define "list_field_validation"}}
    {{ lowerFirstFunc .Name }} := *t.{{ .Name }}
    {{ range .ListRules }} 
        {{ .RuleValidationCode }}
    {{ end }}

    for i, {{ lowerFirstFunc .Name }} := range {{ lowerFirstFunc .Name }} {
		index := fmt.Sprintf("[%d]", i)
        {{ range .ValueRules }} 
            {{ .RuleValidationCode }}
        {{ end }}
    }
{{ end }}

{{ define "type_field_validation"}}
    {{ lowerFirstFunc .Name }}, err := t.{{ .Name }}.innerValidation()
    if err != nil {
        for k, v := range err {
            errs["{{ lowerFirstFunc .Name }}."+k] = append(errs["{{ lowerFirstFunc .Name }}."+k], v...)
        }
    } else {
       {{ range .Rules }} 
            {{ .RuleValidationCode }}
       {{ end }}
    }

{{ end }}
