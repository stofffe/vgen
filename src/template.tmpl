{{ define "package" }}
// THIS FILE IS GENERATED BY VGEN
// DO NOT EDIT
package {{ .Package }}
import (
    {{ range .Imports }}
        "{{ . }}"
    {{ end }}
)
{{ end }}

{{ define "struct_type" }}
type {{ .Name }}Vgen struct {
    {{- range .Fields }}
        {{ .Name }} *{{ .Field.Typ -}} {{ .Tags }}
    {{ end }}
}
{{ end }}

{{ define "struct_validation" }}
func (t {{ .Name }}Vgen) Validate() ({{ .Name }}, error) {
    _{{ .Name }}, errs :=  t.InnerValidation()
    if len(errs) > 0 {
        j, _ := json.Marshal(errs)
        return {{ .Name }}{}, fmt.Errorf("%s", j)
    }
    return _{{ .Name }}, nil
}

func (t {{ .Name }}Vgen) InnerValidation() ({{ .Name }}, map[string][]string) {
    res := {{ .Name }}{}
    errs := make(map[string][]string) 

    {{ range .Fields }}
        if t.{{ .Name }} != nil {

        _{{ .Name }} := *t.{{ .Name }}
        {
            {{ .Field.Code }}
        }       
        } {{ if .Required }} else {
            errs["{{ .Alias }}"] = append(errs["{{ .Alias }}"], fmt.Sprintf("required"))
        } {{ end }}
    {{ end }}

    if len(errs) > 0 {
        return {{ .Name }}{}, errs
    }

    return res, nil
}
{{ end }}

{{ define "prim-field-validation"}}
{{ if .Rules }}
    {{ range .Rules }}
        {{ .Code }} 
    {{ end }}
{{ end }}
 _ = _{{ .Name }}
{{ end }}

{{ define "list-field-validation"}}
{{ range .Rules }}
    {{ .Code }} 
{{ end }}
for i{{ .Depth }}, _{{ .Name }} := range _{{ .Name }} {
    {{ .Inner.Code }}
    _ = i{{ .Depth }}
}
{{ end }}

{{ define "type-field-validation"}}
{{ if .Rules }}
    {{ range .Rules }}
        {{ .Code }} 
    {{ end }}
{{ end }}
{{ end }}
