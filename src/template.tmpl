{{ define "package" }}
// THIS FILE IS GENERATED BY VGEN
// DO NOT EDIT
package {{ .Package }}
import (
    {{ range .Imports }}
        "{{ . }}"
    {{ end }}
)
{{ end }}

{{ define "struct-type" }}
type {{ .Name }}Vgen struct {
    {{- range .Fields }}
        {{ .Name }} *{{ .Field.ValidationTyp -}} {{ .Tags }}
    {{ end }}
}
{{ end }}

{{ define "struct-validation" }}
func (t {{ .Name }}Vgen) ValidatedConvert() ({{ .Name }}, *map[string][]string) {
    errs :=  t.Validate()
    if len(errs) > 0 {
        return {{ .Name }}{}, &errs
    }
    return t.Convert(), nil
}

func (t {{ .Name }}Vgen) Validate() map[string][]string {
    errs := make(map[string][]string) 

    {{ range .Fields }}
        if t.{{ .Name }} != nil {

        _{{ .Name }} := *t.{{ .Name }}
        {
            {{ .Field.ValidationCode }}
        }       
        } {{ if .Required }} else {
            errs["{{ .Alias }}"] = append(errs["{{ .Alias }}"], fmt.Sprintf("required"))
        } {{ end }}
    {{ end }}

    return errs
}
{{ end }}

{{ define "prim-field-validation"}}
{{ range .Rules }}
    {{ .Code }} 
{{ else }}
    _ = _{{ .Name }}
{{ end }}
{{ end }} 

{{ define "list-field-validation"}}
{{ range .Rules }}
    {{ .Code }} 
{{ end }}
for i{{ .Depth }}, _{{ .Name }} := range _{{ .Name }} {
    {{ .Inner.ValidationCode }}
    _ = i{{ .Depth }}
}
{{ end }}

{{ define "type-field-validation"}}
{{ if .Rules }}
    {{ range .Rules }}
        {{ .Code }} 
    {{ end }}
{{ end }}
_ = _{{ .Name }}
{{ end }}

{{ define "struct-convert" }}
func (t {{ .Name }}Vgen) Convert() {{ .Name }} {
    var res {{ .Name }}
    {{ range .Fields }}
        if t.{{ .Name }} != nil {
            _{{ .Name }} := *t.{{ .Name }}
            {{ .Field.ConvertCode }}
        }
    {{ end }}
    return res
}
{{ end }}

{{ define "prim-field-convert" }} 
    res.{{ .Name }} = _{{ .Name }}
{{ end }}

{{ define "type-field-convert" }} 
    res.{{ .Name }} = _{{ .Name }}.Convert()
{{ end }}

{{ define "list-field-convert-outer" }} 
    res.{{ .Name }}{{ .Path }} = make({{ .ConvertTyp }}, len(_{{ .Name }}))
    for i{{ .Depth }}, _{{ .Name }} := range _{{ .Name }} {
        {{ .Inner.ConvertCode }} 
    }
{{ end }}

{{ define "list-field-convert-inner" }} 
    res.{{ .Name }}{{ .Path }} = make({{ .ConvertTyp }}, len(_{{ .Name }}))
    for i{{ .Depth }}, _{{ .Name }} := range _{{ .Name }} {
        res.{{ .Name }}{{ .InnerPath }} = _{{ .Name }}{{ .InnerConvert }}
    }
{{ end }}

{{ define "json-decoding" }} 
func {{ .Name }}FromJson(bytes []byte) ({{ .Name }}, map[string][]string) {
    var v {{ .Name }}Vgen

    err := json.Unmarshal(bytes, &v)
    if err != nil {
        return {{ .Name }}{}, err
    }

    r, err := v.ValidatedConvert()
    if err != nil {
        return {{ .Name }}{}, err
    }

    return r, nil
}
{{ end }}
